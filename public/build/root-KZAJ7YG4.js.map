{
  "version": 3,
  "sources": ["../../app/components/ThemeContext.tsx", "browser-route-module:/Users/dom/Documents/GitHub/dominicklee.net/app/root.tsx?browser", "../../app/root.tsx", "../../app/components/ThemeProvider.tsx", "../../app/components/ThemeSetter.tsx"],
  "sourcesContent": ["", "export { default, meta } from \"/Users/dom/Documents/GitHub/dominicklee.net/app/root.tsx\";", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from 'remix';\nimport type { MetaFunction } from 'remix';\nimport ThemeProvider from './components/ThemeProvider';\nimport ThemeSetter from './components/ThemeSetter';\n\nexport const meta: MetaFunction = () => {\n  return { title: \"I'm Dominick Lee\" };\n};\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <ThemeSetter />\n      <html lang=\"en\">\n        <head>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n          <Meta />\n          <Links />\n        </head>\n        <body>\n          <Outlet />\n          <ScrollRestoration />\n          <Scripts />\n          {process.env.NODE_ENV === 'development' && <LiveReload />}\n        </body>\n      </html>\n    </ThemeProvider>\n  );\n}\n", "// ThemeProvider.js\nimport React, { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\nconst ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme--${theme}`}>\n        {children}\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n", "//ThemeSetter.js\nimport React, { useContext } from \"react\";\n\nimport ThemeContext from \"./ThemeContext\";\n\nexport default function ThemeSetter() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    <select value={theme} onChange={(e) => setTheme(e.currentTarget.value)}>\n      {themeOptions.map((option, idx) => (\n        <option value={option.value} key={idx}>\n          {option.value}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nconst themeOptions = [{ value: \"light\" }, { value: \"dark\" }];\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;;;ACAA;;;ACAA;AACA,mBAA2C;AAC3C,0BAAgD;AAEhD,IAAM,gBAAgB,CAAC,EAAE,eAAe;AACtC,QAAM,CAAC,OAAO,YAAY,2BAAS,SAAkB;AAErD,QAAM,eAAe,OAAO;AAE5B,8BAAU,MAAM;AACd,UAAM,kBAAkB,aAAa,QAAQ;AAE7C,QAAI,CAAC,CAAC,iBAAiB;AACrB,eAAS;AAAA;AAAA,KAEV;AAEH,8BAAU,MAAM;AACd,iBAAa,QAAQ,eAAe;AAAA,KACnC,CAAC;AAEJ,SACE,mDAAC,4BAAa,UAAd;AAAA,IAAuB,OAAO,EAAE,OAAO;AAAA,KACrC,mDAAC,OAAD;AAAA,IAAK,WAAW,UAAU;AAAA,KACvB;AAAA;AAMT,IAAO,wBAAQ;;;AC9Bf;AACA,oBAAkC;AAElC,2BAAyB;AAEV,uBAAuB;AACpC,QAAM,EAAE,OAAO,aAAa,8BAAW;AAEvC,SACE,oDAAC,UAAD;AAAA,IAAQ,OAAO;AAAA,IAAO,UAAU,CAAC,MAAM,SAAS,EAAE,cAAc;AAAA,KAC7D,aAAa,IAAI,CAAC,QAAQ,QACzB,oDAAC,UAAD;AAAA,IAAQ,OAAO,OAAO;AAAA,IAAO,KAAK;AAAA,KAC/B,OAAO;AAAA;AAOlB,IAAM,eAAe,CAAC,EAAE,OAAO,WAAW,EAAE,OAAO;;;AFP5C,IAAM,OAAqB,MAAM;AACtC,SAAO,EAAE,OAAO;AAAA;AAGH,eAAe;AAC5B,SACE,oCAAC,uBAAD,MACE,oCAAC,aAAD,OACA,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,QAAD;AAAA,IAAM,SAAQ;AAAA,MACd,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,IAAW,SAAQ;AAAA,MAC9B,oCAAC,MAAD,OACA,oCAAC,OAAD,QAEF,oCAAC,QAAD,MACE,oCAAC,gCAAD,OACA,oCAAC,mBAAD,OACA,oCAAC,SAAD,OAC2C,oCAAC,YAAD;AAAA;",
  "names": []
}
