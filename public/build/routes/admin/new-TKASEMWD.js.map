{
  "version": 3,
  "sources": ["browser-route-module:/Users/dom/Documents/GitHub/dominicklee.net/app/routes/admin/new.tsx?browser", "../../../../app/routes/admin/new.tsx"],
  "sourcesContent": ["export { default } from \"/Users/dom/Documents/GitHub/dominicklee.net/app/routes/admin/new.tsx\";", "import { isErrorResponse } from \"@remix-run/react/data\";\nimport { redirect, Form, useActionData, useTransition } from \"remix\";\nimport { createPost } from \"~/post\";\n\n\nexport let action = async ({ request }) => {\n  let formData = await request.formData();\n\n  let title = formData.get(\"title\");\n  let slug = formData.get(\"slug\")\n  let markdown = formData.get(\"markdown\")\n\n  let errors = {};\n  if (!title) errors.title = true;\n  if (!slug) errors.slug = true;\n  if (!markdown) errors.markdown = true;\n\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n\n  await createPost({ title, slug, markdown });\n\n  return redirect(\"/admin\")\n}\n\n\nexport default function NewPost() {\n  // pull in errors from our action using the useActionData() hook\n  let errors = useActionData();\n  // transition will allow us to create a better user experience by updating the text of the submit button while creating the blog post\n  let transition = useTransition();\n  // we are going to create the slug for the user\n  let slug = ''\n\n  // as the Title input is updated we will generate the slug automatically. \n  // My First Post slug would equal 'my-first-post'. We will convert to lower case and we will strip spaces and replace with hyphens \n  const handleChange = (e) => {\n    let text = e.target.value\n    // using regex and replace, let's convert spaces to dashes\n    slug = text.replace(/\\s/g, '-');\n    // lets set the value of the slug text box to be our new slug in lowercase \n    document.getElementById(\"slugInput\").value = slug.toLowerCase();\n  }\n  return (\n    <Form method=\"post\">\n      <p>\n        <label htmlFor=\"\">\n          Post Title: {\" \"} {errors?.title && <em>Title is required</em>} <input onChange={handleChange} type=\"text\" name=\"title\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"\"> Post Slug: {\" \"} {errors?.slug && <em>Slug is required</em>}\n          <input placeholder={slug} id=\"slugInput\" type=\"text\" name=\"slug\" />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"markdown\">Markdown:</label>{\" \"} {errors?.markdown && <em>Markdown is required</em>}\n        <br />\n        <textarea name=\"markdown\" id=\"\" rows={20} cols={30} />\n      </p>\n      <p>\n        <button type=\"submit\">{transition.submission ? \"Creating...\" : \"Create Post\"}</button>\n      </p>\n    </Form>\n  )\n} \n"],
  "mappings": ";;;;;;;;;;;AAAA;;;ACAA;AA2Be,mBAAmB;AAEhC,MAAI,SAAS;AAEb,MAAI,aAAa;AAEjB,MAAI,OAAO;AAIX,QAAM,eAAe,CAAC,MAAM;AAC1B,QAAI,OAAO,EAAE,OAAO;AAEpB,WAAO,KAAK,QAAQ,OAAO;AAE3B,aAAS,eAAe,aAAa,QAAQ,KAAK;AAAA;AAEpD,SACE,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAG,gBACH,KAAI,KAAE,kCAAQ,UAAS,oCAAC,MAAD,MAAI,sBAAuB,KAAC,oCAAC,SAAD;AAAA,IAAO,UAAU;AAAA,IAAc,MAAK;AAAA,IAAO,MAAK;AAAA,QAGpH,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAG,gBAAa,KAAI,KAAE,kCAAQ,SAAQ,oCAAC,MAAD,MAAI,qBACvD,oCAAC,SAAD;AAAA,IAAO,aAAa;AAAA,IAAM,IAAG;AAAA,IAAY,MAAK;AAAA,IAAO,MAAK;AAAA,QAG9D,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAW,cAAkB,KAAI,KAAE,kCAAQ,aAAY,oCAAC,MAAD,MAAI,yBAC1E,oCAAC,MAAD,OACA,oCAAC,YAAD;AAAA,IAAU,MAAK;AAAA,IAAW,IAAG;AAAA,IAAG,MAAM;AAAA,IAAI,MAAM;AAAA,OAElD,oCAAC,KAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,KAAU,WAAW,aAAa,gBAAgB;AAAA;",
  "names": []
}
