{
  "version": 3,
  "sources": ["browser-route-module:/Users/dom/Documents/GitHub/dominicklee.net/app/routes/admin/new.tsx?browser", "../../../../app/routes/admin/new.tsx"],
  "sourcesContent": ["export { default } from \"/Users/dom/Documents/GitHub/dominicklee.net/app/routes/admin/new.tsx\";", "import { isErrorResponse } from '@remix-run/react/data';\nimport { redirect, Form, useActionData, useTransition } from 'remix';\nimport { createPost } from '~/post';\n\nimport Editor from '~/components/editor.client';\nimport { ClientOnly } from 'remix-utils';\nimport { useState } from 'react';\nconst axios = require('axios').default;\n\nexport let action = async ({ request }) => {\n  let formData = await request.formData();\n\n  let title = formData.get('title');\n  let coverUrl = formData.get('coverUrl');\n  let slug = formData.get('slug');\n  let description = formData.get('description');\n  let editorjs = formData.get('editorjs');\n  // Error handling\n  let errors: any = {};\n  if (!title) errors.title = true;\n  if (!coverUrl) errors.coverUrl = true;\n  if (!slug) errors.slug = true;\n  if (!description) errors.description = true;\n  if (!editorjs) errors.editorjs = true;\n\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n\n  await createPost({ title, coverUrl, slug, description, editorjs });\n\n  return redirect('/admin');\n};\n\nexport default function NewPost() {\n  // pull in errors from our action using the useActionData() hook\n  let errors = useActionData();\n  // transition will allow us to create a better user experience by updating the text of the submit button while creating the blog post\n  let transition = useTransition();\n  // we are going to create the slug for the user\n  let slug = '';\n\n  // as the Title input is updated we will generate the slug automatically.\n  // My First Post slug would equal 'my-first-post'. We will convert to lower case and we will strip spaces and replace with hyphens\n  const handleChange = (e) => {\n    let text = e.target.value;\n    // using regex and replace, let's convert spaces to dashes\n    slug = text.replace(/\\s/g, '-');\n    // lets set the value of the slug text box to be our new slug in lowercase\n    document.getElementById('slugInput').value = slug.toLowerCase();\n  };\n\n  const [savedData, setSavedData] = useState('');\n  const [coverUrl, setCoverUrl] = useState('');\n  const [isSelected, setIsSelected] = useState(false);\n  const [selectedFile, setSelectedFile] = useState('');\n\n  async function imageUpload(event: any) {\n    let file = event.target.files[0];\n    const responseFromAWS = await axios({\n      method: 'post',\n      url: '/.netlify/functions/uploadImage',\n      data: file.name,\n    });\n    console.log(responseFromAWS.data.url);\n    console.log('ATTEMPTING PUT');\n    const putResponse = await fetch(responseFromAWS.data.url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      body: file,\n    });\n    const imageUrl = putResponse.url.split('?')[0];\n    setCoverUrl(imageUrl);\n    setIsSelected(true);\n  }\n\n  return (\n    <Form reloadDocument method='post'>\n      <div className='new-post-container'>\n        <p>\n          <label htmlFor=''>\n            Post Title: {errors?.title && <em>Title is required</em>}{' '}\n            <input onChange={handleChange} type='text' name='title' />\n          </label>\n        </p>\n\n        <img className='cover-preview' src={coverUrl} />\n        <p>\n          <label htmlFor=''>\n            {' '}\n            Post Slug: {errors?.slug && <em>Slug is required</em>}\n            <input placeholder={slug} id='slugInput' type='text' name='slug' />\n          </label>\n        </p>\n        <p>\n          <label htmlFor=''>\n            Post Cover: {errors?.coverUrl && <em>Cover is required</em>}{' '}\n            <input\n              type='file'\n              name='cover'\n              value={selectedFile}\n              onChange={imageUpload}\n            />\n          </label>\n        </p>\n        <p>\n          Insert Description:\n          <label htmlFor=''>\n            <input defaultValue={''} name='description' id='' />\n          </label>{' '}\n          {errors?.description && <em>Description is required</em>}\n          <br />\n          <ClientOnly>\n            {() => (\n              <Editor\n                previousData={'{}'}\n                saveOutput={savedData}\n                save={(savedData: any) => setSavedData(savedData)}\n              />\n            )}\n          </ClientOnly>\n        </p>\n        <input name='editorjs' defaultValue={savedData} value={savedData} />\n        <label htmlFor=''>\n          <input\n            // className='hidden'\n            type='text'\n            name='coverUrl'\n            defaultValue={coverUrl}\n          />\n        </label>\n        <p>\n          <button type='submit'>\n            {transition.submission ? 'Creating...' : 'Create Post'}\n          </button>\n        </p>\n      </div>\n    </Form>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAMA,mBAAyB;AACzB,IAAM,QAAQ,gBAAiB;AA2BhB,mBAAmB;AAEhC,MAAI,SAAS;AAEb,MAAI,aAAa;AAEjB,MAAI,OAAO;AAIX,QAAM,eAAe,CAAC,MAAM;AAC1B,QAAI,OAAO,EAAE,OAAO;AAEpB,WAAO,KAAK,QAAQ,OAAO;AAE3B,aAAS,eAAe,aAAa,QAAQ,KAAK;AAAA;AAGpD,QAAM,CAAC,WAAW,gBAAgB,2BAAS;AAC3C,QAAM,CAAC,UAAU,eAAe,2BAAS;AACzC,QAAM,CAAC,YAAY,iBAAiB,2BAAS;AAC7C,QAAM,CAAC,cAAc,mBAAmB,2BAAS;AAEjD,6BAA2B,OAAY;AACrC,QAAI,OAAO,MAAM,OAAO,MAAM;AAC9B,UAAM,kBAAkB,MAAM,MAAM;AAAA,MAClC,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM,KAAK;AAAA;AAEb,YAAQ,IAAI,gBAAgB,KAAK;AACjC,YAAQ,IAAI;AACZ,UAAM,cAAc,MAAM,MAAM,gBAAgB,KAAK,KAAK;AAAA,MACxD,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA;AAAA,MAElB,MAAM;AAAA;AAER,UAAM,WAAW,YAAY,IAAI,MAAM,KAAK;AAC5C,gBAAY;AACZ,kBAAc;AAAA;AAGhB,SACE,oCAAC,MAAD;AAAA,IAAM,gBAAc;AAAA,IAAC,QAAO;AAAA,KAC1B,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAG,gBACH,kCAAQ,UAAS,oCAAC,MAAD,MAAI,sBAAwB,KAC1D,oCAAC,SAAD;AAAA,IAAO,UAAU;AAAA,IAAc,MAAK;AAAA,IAAO,MAAK;AAAA,QAIpD,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAgB,KAAK;AAAA,MACpC,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KACZ,KAAI,eACO,kCAAQ,SAAQ,oCAAC,MAAD,MAAI,qBAChC,oCAAC,SAAD;AAAA,IAAO,aAAa;AAAA,IAAM,IAAG;AAAA,IAAY,MAAK;AAAA,IAAO,MAAK;AAAA,QAG9D,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAG,gBACH,kCAAQ,aAAY,oCAAC,MAAD,MAAI,sBAAwB,KAC7D,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAO;AAAA,IACP,UAAU;AAAA,QAIhB,oCAAC,KAAD,MAAG,uBAED,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KACb,oCAAC,SAAD;AAAA,IAAO,cAAc;AAAA,IAAI,MAAK;AAAA,IAAc,IAAG;AAAA,OACxC,KACR,kCAAQ,gBAAe,oCAAC,MAAD,MAAI,4BAC5B,oCAAC,MAAD,OACA,oCAAC,YAAD,MACG,MACC,oCAAC,QAAD;AAAA,IACE,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,MAAM,CAAC,eAAmB,aAAa;AAAA,QAK/C,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAW,cAAc;AAAA,IAAW,OAAO;AAAA,MACvD,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KACb,oCAAC,SAAD;AAAA,IAEE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,cAAc;AAAA,OAGlB,oCAAC,KAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,KACV,WAAW,aAAa,gBAAgB;AAAA;",
  "names": []
}
